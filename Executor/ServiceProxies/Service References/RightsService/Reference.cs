//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceProxies.RightsService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HealthState", Namespace="http://schemas.datacontract.org/2004/07/Easis.Testing")]
    [System.SerializableAttribute()]
    public partial class HealthState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceProxies.RightsService.HealthMessage[] MessageListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceProxies.RightsService.TotalState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceProxies.RightsService.HealthMessage[] MessageList {
            get {
                return this.MessageListField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageListField, value) != true)) {
                    this.MessageListField = value;
                    this.RaisePropertyChanged("MessageList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceProxies.RightsService.TotalState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HealthMessage", Namespace="http://schemas.datacontract.org/2004/07/Easis.Testing")]
    [System.SerializableAttribute()]
    public partial class HealthMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceProxies.RightsService.Importance MessageImportanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StackTraceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceProxies.RightsService.SubState StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceProxies.RightsService.Importance MessageImportance {
            get {
                return this.MessageImportanceField;
            }
            set {
                if ((this.MessageImportanceField.Equals(value) != true)) {
                    this.MessageImportanceField = value;
                    this.RaisePropertyChanged("MessageImportance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace {
            get {
                return this.StackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.StackTraceField, value) != true)) {
                    this.StackTraceField = value;
                    this.RaisePropertyChanged("StackTrace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceProxies.RightsService.SubState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TotalState", Namespace="http://schemas.datacontract.org/2004/07/Easis.Testing")]
    public enum TotalState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failure = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Importance", Namespace="http://schemas.datacontract.org/2004/07/Easis.Testing")]
    public enum Importance : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Critical = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ignorable = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubState", Namespace="http://schemas.datacontract.org/2004/07/Easis.Testing")]
    public enum SubState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failure = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://clavire.org/contracts/", ConfigurationName="RightsService.ITestable")]
    public interface ITestable {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://clavire.org/contracts/ITestable/CheckHealth", ReplyAction="http://clavire.org/contracts/ITestable/CheckHealthResponse")]
        ServiceProxies.RightsService.HealthState CheckHealth();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestableChannel : ServiceProxies.RightsService.ITestable, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestableClient : System.ServiceModel.ClientBase<ServiceProxies.RightsService.ITestable>, ServiceProxies.RightsService.ITestable {
        
        public TestableClient() {
        }
        
        public TestableClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestableClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestableClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestableClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServiceProxies.RightsService.HealthState CheckHealth() {
            return base.Channel.CheckHealth();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RightsService.IRightsProviderSerivce")]
    public interface IRightsProviderSerivce {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsProviderSerivce/CanAccessResource", ReplyAction="http://tempuri.org/IRightsProviderSerivce/CanAccessResourceResponse")]
        bool CanAccessResource(string name, string resource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsProviderSerivce/GetUserResources", ReplyAction="http://tempuri.org/IRightsProviderSerivce/GetUserResourcesResponse")]
        string[] GetUserResources(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsProviderSerivce/GetUserResourcesFromList", ReplyAction="http://tempuri.org/IRightsProviderSerivce/GetUserResourcesFromListResponse")]
        string[] GetUserResourcesFromList(string user, string[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsProviderSerivce/CanExecutePackage", ReplyAction="http://tempuri.org/IRightsProviderSerivce/CanExecutePackageResponse")]
        bool CanExecutePackage(string name, string package);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsProviderSerivce/GetUserPackages", ReplyAction="http://tempuri.org/IRightsProviderSerivce/GetUserPackagesResponse")]
        string[] GetUserPackages(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRightsProviderSerivceChannel : ServiceProxies.RightsService.IRightsProviderSerivce, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RightsProviderSerivceClient : System.ServiceModel.ClientBase<ServiceProxies.RightsService.IRightsProviderSerivce>, ServiceProxies.RightsService.IRightsProviderSerivce {
        
        public RightsProviderSerivceClient() {
        }
        
        public RightsProviderSerivceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RightsProviderSerivceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RightsProviderSerivceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RightsProviderSerivceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CanAccessResource(string name, string resource) {
            return base.Channel.CanAccessResource(name, resource);
        }
        
        public string[] GetUserResources(string name) {
            return base.Channel.GetUserResources(name);
        }
        
        public string[] GetUserResourcesFromList(string user, string[] list) {
            return base.Channel.GetUserResourcesFromList(user, list);
        }
        
        public bool CanExecutePackage(string name, string package) {
            return base.Channel.CanExecutePackage(name, package);
        }
        
        public string[] GetUserPackages(string name) {
            return base.Channel.GetUserPackages(name);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RightsService.IRightsManagerService")]
    public interface IRightsManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsManagerService/AllowResources", ReplyAction="http://tempuri.org/IRightsManagerService/AllowResourcesResponse")]
        void AllowResources(string name, string[] resources);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsManagerService/DenyResources", ReplyAction="http://tempuri.org/IRightsManagerService/DenyResourcesResponse")]
        void DenyResources(string name, string[] resources);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsManagerService/AllowPackages", ReplyAction="http://tempuri.org/IRightsManagerService/AllowPackagesResponse")]
        void AllowPackages(string name, string[] packages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsManagerService/DenyPackages", ReplyAction="http://tempuri.org/IRightsManagerService/DenyPackagesResponse")]
        void DenyPackages(string name, string[] packages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsManagerService/DisableUser", ReplyAction="http://tempuri.org/IRightsManagerService/DisableUserResponse")]
        void DisableUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsManagerService/EnableUser", ReplyAction="http://tempuri.org/IRightsManagerService/EnableUserResponse")]
        void EnableUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsManagerService/DisableUsersTemporaryExcept", ReplyAction="http://tempuri.org/IRightsManagerService/DisableUsersTemporaryExceptResponse")]
        void DisableUsersTemporaryExcept(string[] names);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsManagerService/StopDisablingUsers", ReplyAction="http://tempuri.org/IRightsManagerService/StopDisablingUsersResponse")]
        void StopDisablingUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsManagerService/EnablePackageChecking", ReplyAction="http://tempuri.org/IRightsManagerService/EnablePackageCheckingResponse")]
        void EnablePackageChecking();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRightsManagerService/DisablePackageChecking", ReplyAction="http://tempuri.org/IRightsManagerService/DisablePackageCheckingResponse")]
        void DisablePackageChecking();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRightsManagerServiceChannel : ServiceProxies.RightsService.IRightsManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RightsManagerServiceClient : System.ServiceModel.ClientBase<ServiceProxies.RightsService.IRightsManagerService>, ServiceProxies.RightsService.IRightsManagerService {
        
        public RightsManagerServiceClient() {
        }
        
        public RightsManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RightsManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RightsManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RightsManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AllowResources(string name, string[] resources) {
            base.Channel.AllowResources(name, resources);
        }
        
        public void DenyResources(string name, string[] resources) {
            base.Channel.DenyResources(name, resources);
        }
        
        public void AllowPackages(string name, string[] packages) {
            base.Channel.AllowPackages(name, packages);
        }
        
        public void DenyPackages(string name, string[] packages) {
            base.Channel.DenyPackages(name, packages);
        }
        
        public void DisableUser(string name) {
            base.Channel.DisableUser(name);
        }
        
        public void EnableUser(string name) {
            base.Channel.EnableUser(name);
        }
        
        public void DisableUsersTemporaryExcept(string[] names) {
            base.Channel.DisableUsersTemporaryExcept(names);
        }
        
        public void StopDisablingUsers() {
            base.Channel.StopDisablingUsers();
        }
        
        public void EnablePackageChecking() {
            base.Channel.EnablePackageChecking();
        }
        
        public void DisablePackageChecking() {
            base.Channel.DisablePackageChecking();
        }
    }
}
