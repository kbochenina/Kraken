//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceProxies.RExService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RExService.IExecuteService")]
    public interface IExecuteService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecuteService/ExecuteTask", ReplyAction="http://tempuri.org/IExecuteService/ExecuteTaskResponse")]
        int ExecuteTask(ulong taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecuteService/ExecuteTaskOnFarm", ReplyAction="http://tempuri.org/IExecuteService/ExecuteTaskOnFarmResponse")]
        int ExecuteTaskOnFarm(ulong taskId, string farmId, string executeCommand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecuteService/IsTaskRunning", ReplyAction="http://tempuri.org/IExecuteService/IsTaskRunningResponse")]
        bool IsTaskRunning(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecuteService/StopTaskRunning", ReplyAction="http://tempuri.org/IExecuteService/StopTaskRunningResponse")]
        bool StopTaskRunning(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecuteService/CopyOnStartPaths", ReplyAction="http://tempuri.org/IExecuteService/CopyOnStartPathsResponse")]
        void CopyOnStartPaths(string[] paths, string farmId, string destination);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecuteService/GetAllFileNames", ReplyAction="http://tempuri.org/IExecuteService/GetAllFileNamesResponse")]
        string[] GetAllFileNames(string farmId, ulong taskId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExecuteServiceChannel : ServiceProxies.RExService.IExecuteService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteServiceClient : System.ServiceModel.ClientBase<ServiceProxies.RExService.IExecuteService>, ServiceProxies.RExService.IExecuteService {
        
        public ExecuteServiceClient() {
        }
        
        public ExecuteServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExecuteServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExecuteServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExecuteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int ExecuteTask(ulong taskId) {
            return base.Channel.ExecuteTask(taskId);
        }
        
        public int ExecuteTaskOnFarm(ulong taskId, string farmId, string executeCommand) {
            return base.Channel.ExecuteTaskOnFarm(taskId, farmId, executeCommand);
        }
        
        public bool IsTaskRunning(int uid) {
            return base.Channel.IsTaskRunning(uid);
        }
        
        public bool StopTaskRunning(int uid) {
            return base.Channel.StopTaskRunning(uid);
        }
        
        public void CopyOnStartPaths(string[] paths, string farmId, string destination) {
            base.Channel.CopyOnStartPaths(paths, farmId, destination);
        }
        
        public string[] GetAllFileNames(string farmId, ulong taskId) {
            return base.Channel.GetAllFileNames(farmId, taskId);
        }
    }
}
