//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceProxies.RExInstallationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RExInstallationService.IInstallationService")]
    public interface IInstallationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstallationService/InstallPackage", ReplyAction="http://tempuri.org/IInstallationService/InstallPackageResponse")]
        string InstallPackage(string farmId, string uniqueKey, string fileNameOfUploadedfile);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInstallationService/InstallPackage", ReplyAction="http://tempuri.org/IInstallationService/InstallPackageResponse")]
        System.IAsyncResult BeginInstallPackage(string farmId, string uniqueKey, string fileNameOfUploadedfile, System.AsyncCallback callback, object asyncState);
        
        string EndInstallPackage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInstallationServiceChannel : ServiceProxies.RExInstallationService.IInstallationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InstallPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InstallPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InstallationServiceClient : System.ServiceModel.ClientBase<ServiceProxies.RExInstallationService.IInstallationService>, ServiceProxies.RExInstallationService.IInstallationService {
        
        private BeginOperationDelegate onBeginInstallPackageDelegate;
        
        private EndOperationDelegate onEndInstallPackageDelegate;
        
        private System.Threading.SendOrPostCallback onInstallPackageCompletedDelegate;
        
        public InstallationServiceClient() {
        }
        
        public InstallationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InstallationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InstallationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InstallationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<InstallPackageCompletedEventArgs> InstallPackageCompleted;
        
        public string InstallPackage(string farmId, string uniqueKey, string fileNameOfUploadedfile) {
            return base.Channel.InstallPackage(farmId, uniqueKey, fileNameOfUploadedfile);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInstallPackage(string farmId, string uniqueKey, string fileNameOfUploadedfile, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInstallPackage(farmId, uniqueKey, fileNameOfUploadedfile, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndInstallPackage(System.IAsyncResult result) {
            return base.Channel.EndInstallPackage(result);
        }
        
        private System.IAsyncResult OnBeginInstallPackage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string farmId = ((string)(inValues[0]));
            string uniqueKey = ((string)(inValues[1]));
            string fileNameOfUploadedfile = ((string)(inValues[2]));
            return this.BeginInstallPackage(farmId, uniqueKey, fileNameOfUploadedfile, callback, asyncState);
        }
        
        private object[] OnEndInstallPackage(System.IAsyncResult result) {
            string retVal = this.EndInstallPackage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInstallPackageCompleted(object state) {
            if ((this.InstallPackageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InstallPackageCompleted(this, new InstallPackageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InstallPackageAsync(string farmId, string uniqueKey, string fileNameOfUploadedfile) {
            this.InstallPackageAsync(farmId, uniqueKey, fileNameOfUploadedfile, null);
        }
        
        public void InstallPackageAsync(string farmId, string uniqueKey, string fileNameOfUploadedfile, object userState) {
            if ((this.onBeginInstallPackageDelegate == null)) {
                this.onBeginInstallPackageDelegate = new BeginOperationDelegate(this.OnBeginInstallPackage);
            }
            if ((this.onEndInstallPackageDelegate == null)) {
                this.onEndInstallPackageDelegate = new EndOperationDelegate(this.OnEndInstallPackage);
            }
            if ((this.onInstallPackageCompletedDelegate == null)) {
                this.onInstallPackageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInstallPackageCompleted);
            }
            base.InvokeAsync(this.onBeginInstallPackageDelegate, new object[] {
                        farmId,
                        uniqueKey,
                        fileNameOfUploadedfile}, this.onEndInstallPackageDelegate, this.onInstallPackageCompletedDelegate, userState);
        }
    }
}
