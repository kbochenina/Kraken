//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceProxies.PackageInstallationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PackageInfo", Namespace="http://schemas.datacontract.org/2004/07/PackageInstallationService")]
    [System.SerializableAttribute()]
    public partial class PackageInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<ServiceProxies.PackageInstallationService.PackageInfo.NamedInstance>> VersionedInstancesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackageName {
            get {
                return this.PackageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageNameField, value) != true)) {
                    this.PackageNameField = value;
                    this.RaisePropertyChanged("PackageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<ServiceProxies.PackageInstallationService.PackageInfo.NamedInstance>> VersionedInstances {
            get {
                return this.VersionedInstancesField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionedInstancesField, value) != true)) {
                    this.VersionedInstancesField = value;
                    this.RaisePropertyChanged("VersionedInstances");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="PackageInfo.NamedInstance", Namespace="http://schemas.datacontract.org/2004/07/PackageInstallationService")]
        [System.SerializableAttribute()]
        public partial class NamedInstance : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string FileNameField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private ServiceProxies.PackageInstallationService.PackageInfo.MetaData MetadataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string VersionNameField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string FileName {
                get {
                    return this.FileNameField;
                }
                set {
                    if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                        this.FileNameField = value;
                        this.RaisePropertyChanged("FileName");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public ServiceProxies.PackageInstallationService.PackageInfo.MetaData Metadata {
                get {
                    return this.MetadataField;
                }
                set {
                    if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                        this.MetadataField = value;
                        this.RaisePropertyChanged("Metadata");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string VersionName {
                get {
                    return this.VersionNameField;
                }
                set {
                    if ((object.ReferenceEquals(this.VersionNameField, value) != true)) {
                        this.VersionNameField = value;
                        this.RaisePropertyChanged("VersionName");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="PackageInfo.PackageChoice", Namespace="http://schemas.datacontract.org/2004/07/PackageInstallationService")]
        [System.SerializableAttribute()]
        public partial class PackageChoice : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string FileNameField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string FolderToInstallField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string OSNameField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string PackageNameField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string VersionNameField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string FileName {
                get {
                    return this.FileNameField;
                }
                set {
                    if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                        this.FileNameField = value;
                        this.RaisePropertyChanged("FileName");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string FolderToInstall {
                get {
                    return this.FolderToInstallField;
                }
                set {
                    if ((object.ReferenceEquals(this.FolderToInstallField, value) != true)) {
                        this.FolderToInstallField = value;
                        this.RaisePropertyChanged("FolderToInstall");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string OSName {
                get {
                    return this.OSNameField;
                }
                set {
                    if ((object.ReferenceEquals(this.OSNameField, value) != true)) {
                        this.OSNameField = value;
                        this.RaisePropertyChanged("OSName");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string PackageName {
                get {
                    return this.PackageNameField;
                }
                set {
                    if ((object.ReferenceEquals(this.PackageNameField, value) != true)) {
                        this.PackageNameField = value;
                        this.RaisePropertyChanged("PackageName");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string VersionName {
                get {
                    return this.VersionNameField;
                }
                set {
                    if ((object.ReferenceEquals(this.VersionNameField, value) != true)) {
                        this.VersionNameField = value;
                        this.RaisePropertyChanged("VersionName");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="PackageInfo.MetaData", Namespace="http://schemas.datacontract.org/2004/07/PackageInstallationService")]
        [System.SerializableAttribute()]
        public partial class MetaData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string FolderToInstallField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string FolderToInstall {
                get {
                    return this.FolderToInstallField;
                }
                set {
                    if ((object.ReferenceEquals(this.FolderToInstallField, value) != true)) {
                        this.FolderToInstallField = value;
                        this.RaisePropertyChanged("FolderToInstall");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TicketResult", Namespace="http://schemas.datacontract.org/2004/07/PackageInstallationService")]
    [System.SerializableAttribute()]
    public partial class TicketResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FolderToInstallField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessfulField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Exception OccuredExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResourceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TicketIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FolderToInstall {
            get {
                return this.FolderToInstallField;
            }
            set {
                if ((object.ReferenceEquals(this.FolderToInstallField, value) != true)) {
                    this.FolderToInstallField = value;
                    this.RaisePropertyChanged("FolderToInstall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccessful {
            get {
                return this.IsSuccessfulField;
            }
            set {
                if ((this.IsSuccessfulField.Equals(value) != true)) {
                    this.IsSuccessfulField = value;
                    this.RaisePropertyChanged("IsSuccessful");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName {
            get {
                return this.NodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeNameField, value) != true)) {
                    this.NodeNameField = value;
                    this.RaisePropertyChanged("NodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception OccuredException {
            get {
                return this.OccuredExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.OccuredExceptionField, value) != true)) {
                    this.OccuredExceptionField = value;
                    this.RaisePropertyChanged("OccuredException");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackageName {
            get {
                return this.PackageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageNameField, value) != true)) {
                    this.PackageNameField = value;
                    this.RaisePropertyChanged("PackageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResourceName {
            get {
                return this.ResourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ResourceNameField, value) != true)) {
                    this.ResourceNameField = value;
                    this.RaisePropertyChanged("ResourceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TicketId {
            get {
                return this.TicketIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketIdField, value) != true)) {
                    this.TicketIdField = value;
                    this.RaisePropertyChanged("TicketId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionName {
            get {
                return this.VersionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionNameField, value) != true)) {
                    this.VersionNameField = value;
                    this.RaisePropertyChanged("VersionName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PackageInstallationService.IPackageInstallationService")]
    public interface IPackageInstallationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPackageInstallationService/GetPackagesInfo", ReplyAction="http://tempuri.org/IPackageInstallationService/GetPackagesInfoResponse")]
        System.Collections.Generic.List<ServiceProxies.PackageInstallationService.PackageInfo> GetPackagesInfo();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPackageInstallationService/GetPackagesInfo", ReplyAction="http://tempuri.org/IPackageInstallationService/GetPackagesInfoResponse")]
        System.IAsyncResult BeginGetPackagesInfo(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ServiceProxies.PackageInstallationService.PackageInfo> EndGetPackagesInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPackageInstallationService/InstallPackageToNode", ReplyAction="http://tempuri.org/IPackageInstallationService/InstallPackageToNodeResponse")]
        void InstallPackageToNode(string farmName, string resourceName, string nodeName, ServiceProxies.PackageInstallationService.PackageInfo.PackageChoice choice);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPackageInstallationService/InstallPackageToNode", ReplyAction="http://tempuri.org/IPackageInstallationService/InstallPackageToNodeResponse")]
        System.IAsyncResult BeginInstallPackageToNode(string farmName, string resourceName, string nodeName, ServiceProxies.PackageInstallationService.PackageInfo.PackageChoice choice, System.AsyncCallback callback, object asyncState);
        
        void EndInstallPackageToNode(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPackageInstallationServiceChannel : ServiceProxies.PackageInstallationService.IPackageInstallationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPackagesInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPackagesInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ServiceProxies.PackageInstallationService.PackageInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ServiceProxies.PackageInstallationService.PackageInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PackageInstallationServiceClient : System.ServiceModel.ClientBase<ServiceProxies.PackageInstallationService.IPackageInstallationService>, ServiceProxies.PackageInstallationService.IPackageInstallationService {
        
        private BeginOperationDelegate onBeginGetPackagesInfoDelegate;
        
        private EndOperationDelegate onEndGetPackagesInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetPackagesInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginInstallPackageToNodeDelegate;
        
        private EndOperationDelegate onEndInstallPackageToNodeDelegate;
        
        private System.Threading.SendOrPostCallback onInstallPackageToNodeCompletedDelegate;
        
        public PackageInstallationServiceClient() {
        }
        
        public PackageInstallationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PackageInstallationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PackageInstallationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PackageInstallationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetPackagesInfoCompletedEventArgs> GetPackagesInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InstallPackageToNodeCompleted;
        
        public System.Collections.Generic.List<ServiceProxies.PackageInstallationService.PackageInfo> GetPackagesInfo() {
            return base.Channel.GetPackagesInfo();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPackagesInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPackagesInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ServiceProxies.PackageInstallationService.PackageInfo> EndGetPackagesInfo(System.IAsyncResult result) {
            return base.Channel.EndGetPackagesInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetPackagesInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetPackagesInfo(callback, asyncState);
        }
        
        private object[] OnEndGetPackagesInfo(System.IAsyncResult result) {
            System.Collections.Generic.List<ServiceProxies.PackageInstallationService.PackageInfo> retVal = this.EndGetPackagesInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPackagesInfoCompleted(object state) {
            if ((this.GetPackagesInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPackagesInfoCompleted(this, new GetPackagesInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPackagesInfoAsync() {
            this.GetPackagesInfoAsync(null);
        }
        
        public void GetPackagesInfoAsync(object userState) {
            if ((this.onBeginGetPackagesInfoDelegate == null)) {
                this.onBeginGetPackagesInfoDelegate = new BeginOperationDelegate(this.OnBeginGetPackagesInfo);
            }
            if ((this.onEndGetPackagesInfoDelegate == null)) {
                this.onEndGetPackagesInfoDelegate = new EndOperationDelegate(this.OnEndGetPackagesInfo);
            }
            if ((this.onGetPackagesInfoCompletedDelegate == null)) {
                this.onGetPackagesInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPackagesInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetPackagesInfoDelegate, null, this.onEndGetPackagesInfoDelegate, this.onGetPackagesInfoCompletedDelegate, userState);
        }
        
        public void InstallPackageToNode(string farmName, string resourceName, string nodeName, ServiceProxies.PackageInstallationService.PackageInfo.PackageChoice choice) {
            base.Channel.InstallPackageToNode(farmName, resourceName, nodeName, choice);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInstallPackageToNode(string farmName, string resourceName, string nodeName, ServiceProxies.PackageInstallationService.PackageInfo.PackageChoice choice, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInstallPackageToNode(farmName, resourceName, nodeName, choice, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInstallPackageToNode(System.IAsyncResult result) {
            base.Channel.EndInstallPackageToNode(result);
        }
        
        private System.IAsyncResult OnBeginInstallPackageToNode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string farmName = ((string)(inValues[0]));
            string resourceName = ((string)(inValues[1]));
            string nodeName = ((string)(inValues[2]));
            ServiceProxies.PackageInstallationService.PackageInfo.PackageChoice choice = ((ServiceProxies.PackageInstallationService.PackageInfo.PackageChoice)(inValues[3]));
            return this.BeginInstallPackageToNode(farmName, resourceName, nodeName, choice, callback, asyncState);
        }
        
        private object[] OnEndInstallPackageToNode(System.IAsyncResult result) {
            this.EndInstallPackageToNode(result);
            return null;
        }
        
        private void OnInstallPackageToNodeCompleted(object state) {
            if ((this.InstallPackageToNodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InstallPackageToNodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InstallPackageToNodeAsync(string farmName, string resourceName, string nodeName, ServiceProxies.PackageInstallationService.PackageInfo.PackageChoice choice) {
            this.InstallPackageToNodeAsync(farmName, resourceName, nodeName, choice, null);
        }
        
        public void InstallPackageToNodeAsync(string farmName, string resourceName, string nodeName, ServiceProxies.PackageInstallationService.PackageInfo.PackageChoice choice, object userState) {
            if ((this.onBeginInstallPackageToNodeDelegate == null)) {
                this.onBeginInstallPackageToNodeDelegate = new BeginOperationDelegate(this.OnBeginInstallPackageToNode);
            }
            if ((this.onEndInstallPackageToNodeDelegate == null)) {
                this.onEndInstallPackageToNodeDelegate = new EndOperationDelegate(this.OnEndInstallPackageToNode);
            }
            if ((this.onInstallPackageToNodeCompletedDelegate == null)) {
                this.onInstallPackageToNodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInstallPackageToNodeCompleted);
            }
            base.InvokeAsync(this.onBeginInstallPackageToNodeDelegate, new object[] {
                        farmName,
                        resourceName,
                        nodeName,
                        choice}, this.onEndInstallPackageToNodeDelegate, this.onInstallPackageToNodeCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PackageInstallationService.IResultForTicketService")]
    public interface IResultForTicketService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResultForTicketService/ReportResult", ReplyAction="http://tempuri.org/IResultForTicketService/ReportResultResponse")]
        void ReportResult(ServiceProxies.PackageInstallationService.TicketResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResultForTicketService/ReportResult", ReplyAction="http://tempuri.org/IResultForTicketService/ReportResultResponse")]
        System.IAsyncResult BeginReportResult(ServiceProxies.PackageInstallationService.TicketResult result, System.AsyncCallback callback, object asyncState);
        
        void EndReportResult(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IResultForTicketServiceChannel : ServiceProxies.PackageInstallationService.IResultForTicketService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResultForTicketServiceClient : System.ServiceModel.ClientBase<ServiceProxies.PackageInstallationService.IResultForTicketService>, ServiceProxies.PackageInstallationService.IResultForTicketService {
        
        private BeginOperationDelegate onBeginReportResultDelegate;
        
        private EndOperationDelegate onEndReportResultDelegate;
        
        private System.Threading.SendOrPostCallback onReportResultCompletedDelegate;
        
        public ResultForTicketServiceClient() {
        }
        
        public ResultForTicketServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ResultForTicketServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResultForTicketServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResultForTicketServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReportResultCompleted;
        
        public void ReportResult(ServiceProxies.PackageInstallationService.TicketResult result) {
            base.Channel.ReportResult(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReportResult(ServiceProxies.PackageInstallationService.TicketResult result, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReportResult(result, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReportResult(System.IAsyncResult result) {
            base.Channel.EndReportResult(result);
        }
        
        private System.IAsyncResult OnBeginReportResult(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ServiceProxies.PackageInstallationService.TicketResult result = ((ServiceProxies.PackageInstallationService.TicketResult)(inValues[0]));
            return this.BeginReportResult(result, callback, asyncState);
        }
        
        private object[] OnEndReportResult(System.IAsyncResult result) {
            this.EndReportResult(result);
            return null;
        }
        
        private void OnReportResultCompleted(object state) {
            if ((this.ReportResultCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReportResultCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReportResultAsync(ServiceProxies.PackageInstallationService.TicketResult result) {
            this.ReportResultAsync(result, null);
        }
        
        public void ReportResultAsync(ServiceProxies.PackageInstallationService.TicketResult result, object userState) {
            if ((this.onBeginReportResultDelegate == null)) {
                this.onBeginReportResultDelegate = new BeginOperationDelegate(this.OnBeginReportResult);
            }
            if ((this.onEndReportResultDelegate == null)) {
                this.onEndReportResultDelegate = new EndOperationDelegate(this.OnEndReportResult);
            }
            if ((this.onReportResultCompletedDelegate == null)) {
                this.onReportResultCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReportResultCompleted);
            }
            base.InvokeAsync(this.onBeginReportResultDelegate, new object[] {
                        result}, this.onEndReportResultDelegate, this.onReportResultCompletedDelegate, userState);
        }
    }
}
