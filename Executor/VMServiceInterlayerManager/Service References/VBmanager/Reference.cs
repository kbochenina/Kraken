//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VMServiceInterlayerManager.VBmanager {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Host", Namespace="http://schemas.datacontract.org/2004/07/Common.VManager.DataTypes")]
    [System.SerializableAttribute()]
    public partial class Host : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConnectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnected {
            get {
                return this.IsConnectedField;
            }
            set {
                if ((this.IsConnectedField.Equals(value) != true)) {
                    this.IsConnectedField = value;
                    this.RaisePropertyChanged("IsConnected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
    [System.SerializableAttribute()]
    public partial struct ErrorMessage : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VMServiceInterlayerManager.VBmanager.ErrorCode CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VMServiceInterlayerManager.VBmanager.ErrorCode Code {
            get {
                return this.CodeField;
            }
            set {
                if ((this.CodeField.Equals(value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ErrorCode", Namespace="http://schemas.datacontract.org/2004/07/Common")]
    public enum ErrorCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNKNOWN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACCESS = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IO = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DATABASE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ARGUMENT = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CONFIGURATION = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HostConnectionParams", Namespace="http://schemas.datacontract.org/2004/07/Common.VManager.DataTypes")]
    [System.SerializableAttribute()]
    public partial struct HostConnectionParams : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> ParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Machine", Namespace="http://schemas.datacontract.org/2004/07/Common.VManager.DataTypes")]
    [System.SerializableAttribute()]
    public partial class Machine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VMServiceInterlayerManager.VBmanager.MachineState StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VMServiceInterlayerManager.VBmanager.MachineState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineState", Namespace="http://schemas.datacontract.org/2004/07/Common.VManager.DataTypes")]
    public enum MachineState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STOPPED = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RUNNING = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUSPENDED = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TRANSITONED = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VBmanager.IVManager")]
    public interface IVManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/GetHosts", ReplyAction="http://tempuri.org/IVManager/GetHostsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/GetHostsErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        VMServiceInterlayerManager.VBmanager.Host[] GetHosts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/AddHost", ReplyAction="http://tempuri.org/IVManager/AddHostResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/AddHostErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        VMServiceInterlayerManager.VBmanager.Host AddHost(VMServiceInterlayerManager.VBmanager.HostConnectionParams parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/GetHostsMachines", ReplyAction="http://tempuri.org/IVManager/GetHostsMachinesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/GetHostsMachinesErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        VMServiceInterlayerManager.VBmanager.Machine[] GetHostsMachines(string hostName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/GetMachineState", ReplyAction="http://tempuri.org/IVManager/GetMachineStateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/GetMachineStateErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        VMServiceInterlayerManager.VBmanager.Machine GetMachineState(string hostName, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/ConnectToHost", ReplyAction="http://tempuri.org/IVManager/ConnectToHostResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/ConnectToHostErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        bool ConnectToHost(string hostName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/DisconnectFromHost", ReplyAction="http://tempuri.org/IVManager/DisconnectFromHostResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/DisconnectFromHostErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        bool DisconnectFromHost(string hostName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/IsGuestOSRunning", ReplyAction="http://tempuri.org/IVManager/IsGuestOSRunningResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/IsGuestOSRunningErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        bool IsGuestOSRunning(string hostName, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/StartMachine", ReplyAction="http://tempuri.org/IVManager/StartMachineResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/StartMachineErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        bool StartMachine(string hostName, string machineName, System.Collections.Generic.Dictionary<string, string> parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/RestartMachine", ReplyAction="http://tempuri.org/IVManager/RestartMachineResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/RestartMachineErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        bool RestartMachine(string hostName, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/SuspendMachine", ReplyAction="http://tempuri.org/IVManager/SuspendMachineResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/SuspendMachineErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        bool SuspendMachine(string hostName, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/WakeMachine", ReplyAction="http://tempuri.org/IVManager/WakeMachineResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/WakeMachineErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        bool WakeMachine(string hostName, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/StopMachine", ReplyAction="http://tempuri.org/IVManager/StopMachineResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/StopMachineErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        void StopMachine(string hostName, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVManager/GetDrivers", ReplyAction="http://tempuri.org/IVManager/GetDriversResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VMServiceInterlayerManager.VBmanager.ErrorMessage), Action="http://tempuri.org/IVManager/GetDriversErrorMessageFault", Name="ErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/Common")]
        string[] GetDrivers();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVManagerChannel : VMServiceInterlayerManager.VBmanager.IVManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VManagerClient : System.ServiceModel.ClientBase<VMServiceInterlayerManager.VBmanager.IVManager>, VMServiceInterlayerManager.VBmanager.IVManager {
        
        public VManagerClient() {
        }
        
        public VManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public VMServiceInterlayerManager.VBmanager.Host[] GetHosts() {
            return base.Channel.GetHosts();
        }
        
        public VMServiceInterlayerManager.VBmanager.Host AddHost(VMServiceInterlayerManager.VBmanager.HostConnectionParams parameters) {
            return base.Channel.AddHost(parameters);
        }
        
        public VMServiceInterlayerManager.VBmanager.Machine[] GetHostsMachines(string hostName) {
            return base.Channel.GetHostsMachines(hostName);
        }
        
        public VMServiceInterlayerManager.VBmanager.Machine GetMachineState(string hostName, string machineName) {
            return base.Channel.GetMachineState(hostName, machineName);
        }
        
        public bool ConnectToHost(string hostName) {
            return base.Channel.ConnectToHost(hostName);
        }
        
        public bool DisconnectFromHost(string hostName) {
            return base.Channel.DisconnectFromHost(hostName);
        }
        
        public bool IsGuestOSRunning(string hostName, string machineName) {
            return base.Channel.IsGuestOSRunning(hostName, machineName);
        }
        
        public bool StartMachine(string hostName, string machineName, System.Collections.Generic.Dictionary<string, string> parameters) {
            return base.Channel.StartMachine(hostName, machineName, parameters);
        }
        
        public bool RestartMachine(string hostName, string machineName) {
            return base.Channel.RestartMachine(hostName, machineName);
        }
        
        public bool SuspendMachine(string hostName, string machineName) {
            return base.Channel.SuspendMachine(hostName, machineName);
        }
        
        public bool WakeMachine(string hostName, string machineName) {
            return base.Channel.WakeMachine(hostName, machineName);
        }
        
        public void StopMachine(string hostName, string machineName) {
            base.Channel.StopMachine(hostName, machineName);
        }
        
        public string[] GetDrivers() {
            return base.Channel.GetDrivers();
        }
    }
}
